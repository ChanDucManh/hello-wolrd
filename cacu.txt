#include<iostream>
#include<queue>
#include<stack>
#include<string>
#include<conio.h>
using namespace std;
int getPriority(string top)
{
	if(top == "^")
		return 3;
	if(top == "*" || top == "/")
		return 2;
	if(top == "+" || top == "-")
		return 1;
	return 0;
}
int main()
{
	stack<string> operations;
	queue<string> output;
	char press;
	char prePress;
	char closedSign = false;
	string symbols;
	bool end = true;
	bool isNumber = false;
	bool prioritize = false;
	bool separation = true;
	int openedSign = 0;
	cout << "Infix: ";
	string top;
	
	do
	{
		press = getch();
		if(press >= '0' && press <= '9' && closedSign == false)
		{
			symbols.append(1,press);
			cout << press;
			isNumber = true;
			end = false;
		}	
		else
		{
			if(isNumber)
			{
				switch(press)
				{
					case '+':
					{
						if(!operations.empty())
						{
							top = operations.top();
							if(getPriority(top) > getPriority("+"))
							{
								output.push(top);
								operations.pop();
							}
						}		
						operations.push("+");
						cout << "+";
						isNumber = false;
						closedSign = false;
						separation = true;
						break;
					}
					case '-':
					{
						if(!operations.empty())
						{
							top = operations.top();
							if(getPriority(top) > getPriority("-"))
							{
								output.push(top);
								operations.pop();
							}
						}	
						operations.push("-");
						cout << "-";
						isNumber = false;
						closedSign = false;
						separation = true;
						break;	
					}
					case '*':
					{
						if(!operations.empty())
						{
							top = operations.top();
							if(getPriority(top) > getPriority("*"))
							{
								output.push(top);
								operations.pop();
							}
						}	
						operations.push("*");
						cout << "*";
						isNumber = false;
						closedSign = false;
						separation = true;
						break;	
					}
					case '/':
					{
						if(!operations.empty())
						{
							top = operations.top();
							if(getPriority(top) > getPriority("/"))
							{
								output.push(top);
								operations.pop();
							}
						}	
						operations.push("/");
						cout << "/";
						isNumber = false;
						closedSign = false;
						separation = true;
						break;
					}
					case '^':
					{
						if(!operations.empty())
						{
							top = operations.top();
							if(getPriority(top) > getPriority("^"))
							{
								output.push(top);
								operations.pop();
							}
						}	
						operations.push("^");
						cout << "^";
						isNumber = false;
						closedSign = false;
						separation = true;
						break;
					}
					case ')':
					{
						if(openedSign != 0)
						{
							cout << ")";
							openedSign--;
							while(operations.top() != "(")
							{
								output.push(operations.top());
								operations.pop();
							}
							operations.pop();
							closedSign = true;
							separation = true;
						}
						else
							separation = false;
						break;	
					}
					default:
					{
						separation = false;
						break;
					}		
				}
				if(!symbols.empty() && separation)
				{
					output.push(symbols);
					symbols.clear();
				}
				end = false;			
			}
			else
			{
				if( press == '(')
				{
					operations.push("(");
					cout << "(";
					isNumber = false;
					openedSign++;
					end = false;
				}
			}	
		}
		if(press == 13) // Press Enter
		{
			if(isNumber != true || openedSign != 0)
				press = ' ';
			if(end == true)
				press = 13;		
		}
	}
	while(press != 13); // Press Enter
	output.push(symbols);
	while(!operations.empty())
	{
		output.push(operations.top());
		operations.pop();
	}
	cout << "\nPostfix: ";
	while(!output.empty())
	{
		cout << " " << output.front();
		output.pop();
	}
	return 0;
}