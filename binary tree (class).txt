#include<iostream>
using namespace std;
struct node
{
	int data;
	node* right;
	node* left;
};
class Tree
{
private:
	node* root;

	int insert(node* &root, int data);
	void show(node* root);
	node* deleteNode(node* root, int data);
	void deleteTree(node* root);
	node* minValueNode(node* nodeRight);
public:
	Tree()
	{
		root = NULL;
	}
	~Tree()
	{
		deleteTree(root);
	}

	int insert(int data);
	void show();
	node* deleteNode(int data);
	void deleteTree();
};
int Tree :: insert(node* &root, int data)
{
	int a;
	if(root == NULL)
	{
		root = new node;
		root->data = data;
		root->right = root->left = NULL;
		return 0;
	}
	if(root->data == data)
		return 1;
	if(data < root->data)
		a = insert(root->left,data);
	else
		a = insert(root->right,data);
	return a;
}
void Tree::show(node* root)
{
	if(root == NULL)
		return;
	cout << root->data;
	show(root->left);
	show(root->right);
}
node* Tree::minValueNode(node* nodeRight)
{
	node* current = nodeRight;
	while(current && current->left != NULL)
		current = current->left;
	return current;
}
node* Tree::deleteNode(node* root, int data)
{
	if(root == NULL)
		return root;
	if(root -> data > data)
	{
		root -> left = deleteNode(root->left,data);
		return root;
	}
	else
		if(root -> data < data)
		{
			root -> right = deleteNode(root ->right, data);
			return root;
		}
	if(root -> left == NULL)
	{
		node* temp = root -> right;
		delete root;
		return temp;
	}
	else
	{
		if(root -> right == NULL)
		{
			node* temp = root ->left;
			delete root;
			return temp;
		}
	}
	node* temp;
	temp = minValueNode(root->right);
	root->data = temp->data;
	root->right = deleteNode(root->right, temp->data);
	return root;	
}
void Tree::deleteTree(node* root)
{
	if(root != NULL)
	{
		deleteTree(root->left);
		deleteTree(root->right);
		delete root;
	}
}
int Tree :: insert(int data)
{
	return(insert(root,data));
}
void Tree::show()
{
	show(root);
	return;
}
node* Tree::deleteNode(int data)
{
	return(deleteNode(root,data));
}
void Tree::deleteTree()
{
	deleteTree(root);
}
int main()
{
	Tree root;
	root.show();
	cout << "end";
	return 0;
}